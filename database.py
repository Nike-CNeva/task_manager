from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from alembic import command
from alembic.config import Config
from settings import settings
from sqlalchemy import event
from sqlalchemy.engine import Engine
# ---------------------------
# ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
# ---------------------------

# üîΩ –ê–¥—Ä–µ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–∏–º–µ—Ä –¥–ª—è SQLite (—Ç–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞), –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ PostgreSQL –∏–ª–∏ MySQL
SQLALCHEMY_DATABASE_URL = settings.DATABASE_URL

# ---------------------------
# üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –ë–î
# ---------------------------
engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})

# ---------------------------
# üß† –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π
# ---------------------------
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
# ---------------------------
# üì¶ –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
# ---------------------------
Base = declarative_base()

@event.listens_for(Engine, "connect")
def set_sqlite_pragma(dbapi_connection, connection_record):
    cursor = dbapi_connection.cursor()
    cursor.execute("PRAGMA foreign_keys=ON")
    cursor.close()
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ Alembic
def run_migrations():
    alembic_cfg = Config("alembic.ini")
    command.upgrade(alembic_cfg, "head")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ Alembic
def downgrade_migrations():
    alembic_cfg = Config("alembic.ini")
    command.downgrade(alembic_cfg, "-1")

def seed_data(db):
    from models import Product, ProductTypeEnum, Workshop, WorkshopEnum, ProfileType, ProfileTypeEnum
    if not db.query(Workshop).first():
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Workshop
        for workshop in WorkshopEnum:
            exists = db.query(Workshop).filter_by(name=workshop).first()
            if not exists:
                db.add(Workshop(name=workshop))
                db.commit()
                
    if not db.query(ProfileType).first():
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è ProfileTypeEnum –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
        for profile_name in ProfileTypeEnum:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Ç–∞–∫–æ–π —Ç–∏–ø —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            exists = db.query(ProfileType).filter_by(name = profile_name).first()
            if not exists:
                db.add(ProfileType(name=profile_name))
                db.commit()
    
