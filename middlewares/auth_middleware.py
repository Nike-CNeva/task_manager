from datetime import datetime, timedelta
from typing import Dict, Optional
from fastapi.responses import RedirectResponse
from jose import jwt, JWTError
from starlette.middleware.base import BaseHTTPMiddleware
from fastapi import APIRouter, Form, Request, HTTPException, Response, status
from passlib.context import CryptContext
from settings import settings
from fastapi.security import OAuth2PasswordBearer

router = APIRouter()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –≥–¥–µ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–æ–∫–µ–Ω
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

class AuthMiddleware(BaseHTTPMiddleware):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ JWT.
    """
    async def dispatch(self, request: Request, call_next):
        access_token = request.cookies.get("access_token") or request.headers.get("Authorization")

        if access_token:
            if access_token.startswith("Bearer "):
                token_part = access_token.split(" ", 1)[1]
            else:
                token_part = access_token  # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤ –∫—É–∫–∞—Ö

            try:
                payload = decode_access_token(token_part)
                request.state.user_id = payload.get("sub") if payload else None
            except JWTError:
                request.state.user_id = None
        else:
            if any(request.url.path.startswith(path) for path in ["/static", "/favicon.ico", "/login", "/"]):
                return await call_next(request)
            request.state.user_id = None

        if request.state.user_id is None and request.url.path not in ["/", "/login"]:
            response = RedirectResponse("/login", status_code=status.HTTP_302_FOUND)
            return response  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º Response –±–µ–∑ `await`

        print(f"üîç Middleware –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å: {request.url}")

        try:
            response = await call_next(request)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å—à–µ
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            response = Response("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", status_code=500)

        print(f"‚úÖ Middleware –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–ø—Ä–æ—Å: {request.url}")

        return response

# ================================
# –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
# ================================
def verify_password(plain_password: str, hashed_password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É."""
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    """–•—ç—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î."""
    return pwd_context.hash(password)

# ================================
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–æ–≤
# ================================
def create_access_token(data: Dict, expires_delta: Optional[timedelta] = None) -> str:
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)

def decode_access_token(token: str):
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT-—Ç–æ–∫–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å.
    """
    return jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ cookies
def get_token_from_cookie(request: Request):
    token = request.cookies.get("access_token")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫—É–∫–∏
    if not token:
        raise HTTPException(status_code=401, detail="Not authenticated")
    return token
