import json
from typing import List
from fastapi import APIRouter, Depends, File, Form, HTTPException, Path, Request, UploadFile
from sqlalchemy.orm import Session, joinedload
from sqlalchemy.exc import SQLAlchemyError
from models import Bid, Customer, ProfileType, Task, TaskWorkshop, User, Workshop, WorkshopEnum
from dependencies import get_current_user
from database import get_db
from fastapi.templating import Jinja2Templates
from schemas import BidDetail, CassetteTypeEnum, Comment, KlamerTypeEnum, Manager, ManagerEnum, MaterialFormEnum, MaterialThicknessEnum, MaterialTypeEnum, ProductTypeEnum, Responsible, Sheet, StatusEnum, TaskDetail, UrgencyEnum, WorkshopRead, WorkshopWithStatus
from services.file_service import save_file
from services.task_service import create_bid, create_tasks, get_tasks_list, save_customer
import os
import logging

logger = logging.getLogger(__name__)

router = APIRouter()
templates = Jinja2Templates(directory="templates")

@router.get("/tasks")
async def get_tasks(request: Request, current_user: User = Depends(get_current_user), db: Session = Depends(get_db)):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—à–∞–±–ª–æ–Ω —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á."""
    if current_user:
        user_authenticated = True
    tasks = get_tasks_list(current_user, db)
    return templates.TemplateResponse("tasks_list.html", {
        "request": request,
        "user_authenticated": user_authenticated, # type: ignore
        "user_type": current_user.user_type.value,
        "tasks": tasks
        })

@router.get("/task/{task_id}", response_model=TaskDetail)
async def get_task_detail(task_id: int, current_user: User = Depends(get_current_user), db: Session = Depends(get_db)):
    try:
        task = db.query(Task).filter(Task.id == task_id).options(
            joinedload(Task.bid).joinedload(Bid.customer),
            joinedload(Task.sheets),
            joinedload(Task.material),
            joinedload(Task.workshops).joinedload(TaskWorkshop.workshop),
            joinedload(Task.responsible_users),
            joinedload(Task.comments).joinedload(Comment.users),
            joinedload(Task.bid).joinedload(Bid.files)
        ).one_or_none()

        if not task:
            raise HTTPException(status_code=404, detail="Task not found")

        material_name = f"{task.material.form.value if task.material.form else ''} {task.material.type.value if task.material.type else ''} {task.material.thickness.value if task.material.thickness else ''}".strip()

        task_detail = TaskDetail(
            id=task.id,
            bid=BidDetail(
                task_number=task.bid.task_number if task.bid else None,
                customer=task.bid.customer.name if task.bid and task.bid.customer else None,
                manager=task.bid.manager.value if task.bid and task.bid.manager else None,
            ),
            product_id=str(task.product_id),
            material=material_name,
            quantity=task.quantity,
            sheets=[Sheet(name=sheet.width.width, thickness=sheet.length.length) for sheet in task.sheets],
            weight=task.weight,
            waste=task.waste,
            urgency=task.urgency.value,
            status=task.status.value,
            workshops=[WorkshopWithStatus(name=workshop.workshop.name.value, status=workshop.status) for workshop in task.workshops],
            responsibles=[Responsible(name=responsible.name) for responsible in task.responsible_users],
            comments=[
                Comment(
                    users=[Responsible(name=user.name) for user in comment.users],
                    text=comment.comment,
                    created_at=comment.created_at
                ) for comment in task.comments
            ],
            files=[File(id=file.id, filename=file.file_name) for file in task.bid.files],
            created_at=task.created_at,
            completed_at=task.completed_at,
        )

        return task_detail
    except SQLAlchemyError as e:
        logger.error(f"Database error while processing task {task_id}: {e}")
        raise HTTPException(status_code=500, detail="Database error")
    except Exception as e:
        logger.error(f"An unexpected error occurred while processing task {task_id}: {e}")
        raise HTTPException(status_code=500, detail="An unexpected error occurred")

@router.post("/task/{task_id}/delete")
async def delete_task(task_id: int, db: Session = Depends(get_db)):
    task = db.query(Task).filter(Task.id == task_id).first()
    if not task:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    bid_id = task.bid_id
    db.delete(task)
    db.commit()

    # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∏–º ‚Äî –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â–µ –∑–∞–¥–∞—á–∏ —É —ç—Ç–æ–≥–æ bid
    remaining_tasks = db.query(Task).filter(Task.bid_id == bid_id).count()
    if remaining_tasks == 0:
        bid = db.query(Bid).filter(Bid.id == bid_id).first()
        if bid:
            db.delete(bid)
            db.commit()

    return {
        "message": f"–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞. Bid {'—Ç–æ–∂–µ —É–¥–∞–ª—ë–Ω' if remaining_tasks == 0 else '—Å–æ—Ö—Ä–∞–Ω—ë–Ω'}",
        "bid_id": bid_id,
        "bid_deleted": remaining_tasks == 0
    }
    
    
@router.get("/tasks/new")
def get_bids(request: Request, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    if current_user:
        user_authenticated = True
    managers = [managers for managers in ManagerEnum]
    status = [status for status in StatusEnum]
    return templates.TemplateResponse("create_task.html", {
        "request": request,
        "user_authenticated": user_authenticated, # type: ignore
        "user_type": current_user.user_type.value,
        "managers": managers,
        "status":status
        })
    
@router.post("/bids/create/")
def create_bids(
    bid_data: str = Form(...),  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É JSON
    files: list[UploadFile] = File(None),  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã
    db: Session = Depends(get_db)
):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ —Å–ª–æ–≤–∞—Ä—å
    
    bid_data_dict = json.loads(bid_data)
    print("üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", json.dumps(bid_data_dict, ensure_ascii=False, indent=4))

    try:
        with db.begin():
            if bid_data_dict["customer_id"] == "new":
                customer = save_customer(db, bid_data_dict["customer"])
                bid_data_dict["customer_id"] = customer.id
            # 1. –°–æ–∑–¥–∞–µ–º Bid
            bid = create_bid(db, bid_data_dict)
            
            if files:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
                for file in files:
                    save_file(bid, file, db)
                    
            # 2. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
            task_ids = create_tasks(db, bid, bid_data_dict)

            task_list = ", ".join(str(tid) for tid in task_ids)
            return {
                "bid_id": bid.id,
                "task_ids": task_ids,
                "message": f"Bid #{bid.id} –∏ –∑–∞–¥–∞—á–∏ —Å ID: {task_list} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã"
            }    
    except UnicodeDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}")
        raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ JSON")
    except SQLAlchemyError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))
    
@router.get("/customers/")
async def get_customers(db: Session = Depends(get_db)):
    return db.query(Customer).all()

@router.post("/customers/")
def add_customer(name: str, db: Session = Depends(get_db)):
    customer = Customer(name=name)
    db.add(customer)
    db.commit()
    db.refresh(customer)
    return customer

@router.get("/products/")
def get_products():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ Enum"""
    return [{"value": item.name, "label": item.value} for item in ProductTypeEnum]

@router.get("/products/{productType}/fields")
def get_product_fields(productType: str, db: Session = Depends(get_db)):

    fields = []
    if productType == "PROFILE": # type: ignore
        profile_types = db.query(ProfileType).all()
        opt_profile = []
        for item in profile_types:
            opt_profile.append({"value": item.id, "label": item.name})
        fields = [
            {"name": "profile_type_id", "label": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Ñ–∏–ª—è", "type": "select", "options": opt_profile},
            {"name": "length", "label": "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø—Ä–æ—Ñ–∏–ª—è", "type": "number"},
            {"name": "quantity", "label": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π", "type": "number"},
        ]
    elif productType == "KLAMER": # type: ignore
        opt_klamer = []
        for item in KlamerTypeEnum:
            opt_klamer.append({"value": item.name, "label": item.value})
        fields = [
            {"name": "type", "label": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª—è–º–µ—Ä–æ–≤", "type": "select", "options": opt_klamer},
            {"name": "quantity", "label": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—è–º–µ—Ä–æ–≤", "type": "number"},
        ]
    elif productType == "BRACKET": # type: ignore
        fields = [
            {"name": "width", "label": "–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤", "type": "number"},
            {"name": "length", "label": "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤", "type": "text"},
            {"name": "thickness", "label": "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤", "type": "number"},
            {"name": "quantity", "label": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤", "type": "number"},
        ]
    elif productType == "EXTENSION_BRACKET": # type: ignore
        fields = [
            {"name": "width", "label": "–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É —É–¥–ª–∏–Ω–∏—Ç–µ–ª–µ–π", "type": "number"},
            {"name": "length", "label": "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —É–¥–ª–∏–Ω–∏—Ç–µ–ª–µ–π", "type": "text"},
            {"name": "heel", "label": "–£–≥–ª–æ–≤–æ–π", "type": "checkbox"},
            {"name": "quantity", "label": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–ª–∏–Ω–∏—Ç–µ–ª–µ–π", "type": "number"},
        ]
    elif productType == "CASSETTE": # type: ignore
        opt_cassette = []
        for item in CassetteTypeEnum:
            opt_cassette.append({"value": item.name, "label": item.value})
        fields = [
            {"name": "cassette_type_id", "label": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Å—Å–µ—Ç", "type": "select", "options": opt_cassette},
            {"name": "quantity", "label": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Å—Å–µ—Ç", "type": "number"},
        ]
    elif productType == "LINEAR_PANEL": # type: ignore
        fields = [
            {"name": "field", "label": "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ä–∞–±–æ—á–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏", "type": "number"},
            {"name": "rust", "label": "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ä—É—Å—Ç–∞", "type": "number"},
            {"name": "length", "label": "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞–Ω–µ–ª–∏", "type": "number"},
            {"name": "butt_end", "label": "–ó–∞–∫—Ä—ã—Ç—ã–µ —Ç–æ—Ä—Ü—ã", "type": "checkbox"},
            {"name": "quantity", "label": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π", "type": "number"},
        ]
    elif productType == "FACING": # type: ignore
        fields = [
            {"name": "quantity", "label": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞—Å–æ–Ω–∫–∏", "type": "number"},
        ]
    elif productType == "SHEET": # type: ignore
        fields = [
            {"name": "quantity", "label": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤", "type": "number"},
        ]
    elif productType == "WALL_PANEL": # type: ignore
        fields = [
            {"name": "quantity", "label": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—ç–∫—Å–∞", "type": "number"},
        ]
    elif productType == "OTHER": # type: ignore
        fields = [
            {"name": "quantity", "label": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "type": "number"},
        ]

    return fields

@router.get("/material/forms/{product_id}")
def get_material_forms(product_id: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–∑–¥–µ–ª–∏—è"""
    product = product_id
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    product_material_map = {
        "PROFILE": [MaterialFormEnum.STRIP, MaterialFormEnum.COIL, MaterialFormEnum.SHEET],
        "KLAMER": [MaterialFormEnum.STRIP],
        "BRACKET": [MaterialFormEnum.STRIP, MaterialFormEnum.COIL, MaterialFormEnum.SHEET],
        "EXTENSION_BRACKET": [MaterialFormEnum.COIL, MaterialFormEnum.SHEET],
        "CASSETTE": [MaterialFormEnum.COIL, MaterialFormEnum.SHEET],
        "LINEAR_PANEL": [MaterialFormEnum.COIL],
        "FACING": [MaterialFormEnum.COIL, MaterialFormEnum.SHEET],
        "SHEET": [MaterialFormEnum.COIL, MaterialFormEnum.SHEET],
        "WALL_PANEL": [MaterialFormEnum.SHEET],
        "OTHER": [MaterialFormEnum.STRIP, MaterialFormEnum.COIL, MaterialFormEnum.SHEET]
    }

    forms = product_material_map.get(product, []) # type: ignore
    return [{"name": form.name, "value": form.value} for form in forms]

@router.get("/material/types/{product_id}/{form}")
def get_material_types(product_id: str, form: str = Path(...)):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–¥–µ–ª–∏—è –∏ —Ñ–æ—Ä–º—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ Enum
    form_enum = MaterialFormEnum[form]

    # –ö–∞—Ä—Ç–∞ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –∏–∑–¥–µ–ª–∏—è
    product_material_map = {
        "PROFILE": {
            MaterialFormEnum.COIL: [MaterialTypeEnum.ZINC],
            MaterialFormEnum.STRIP: [MaterialTypeEnum.STAINLESS_STEEL, MaterialTypeEnum.ZINC],
            MaterialFormEnum.SHEET: [MaterialTypeEnum.ALUMINIUM, MaterialTypeEnum.STEEL, MaterialTypeEnum.STAINLESS_STEEL, MaterialTypeEnum.ZINC]
        },
        "KLAMER": {
            MaterialFormEnum.STRIP: [MaterialTypeEnum.STAINLESS_STEEL, MaterialTypeEnum.ZINC]
        },
        "BRACKET": {
            MaterialFormEnum.STRIP: [MaterialTypeEnum.ZINC],
            MaterialFormEnum.SHEET: [MaterialTypeEnum.STAINLESS_STEEL, MaterialTypeEnum.ZINC]
        },
        "EXTENSION_BRACKET": {
            MaterialFormEnum.COIL: [MaterialTypeEnum.ZINC],
            MaterialFormEnum.SHEET: [MaterialTypeEnum.STAINLESS_STEEL, MaterialTypeEnum.ZINC]
        },
        "CASSETTE": {
            MaterialFormEnum.COIL: [MaterialTypeEnum.ZINC, MaterialTypeEnum.POLYMER],
            MaterialFormEnum.SHEET: [MaterialTypeEnum.ALUMINIUM, MaterialTypeEnum.STAINLESS_STEEL, MaterialTypeEnum.ZINC, MaterialTypeEnum.POLYMER]
        },
        "LINEAR_PANEL": {
            MaterialFormEnum.COIL: [MaterialTypeEnum.ZINC, MaterialTypeEnum.POLYMER],
            MaterialFormEnum.SHEET: [MaterialTypeEnum.ALUMINIUM, MaterialTypeEnum.ZINC, MaterialTypeEnum.POLYMER]
        },
        "FACING": {
            MaterialFormEnum.COIL: [MaterialTypeEnum.ZINC, MaterialTypeEnum.POLYMER],
            MaterialFormEnum.SHEET: [MaterialTypeEnum.ALUMINIUM, MaterialTypeEnum.STEEL, MaterialTypeEnum.STAINLESS_STEEL, MaterialTypeEnum.ZINC, MaterialTypeEnum.POLYMER]
        },
        "SHEET": {
            MaterialFormEnum.COIL: [MaterialTypeEnum.ZINC, MaterialTypeEnum.POLYMER],
            MaterialFormEnum.SHEET: [MaterialTypeEnum.ALUMINIUM, MaterialTypeEnum.STEEL, MaterialTypeEnum.STAINLESS_STEEL, MaterialTypeEnum.ZINC]
        },
        "WALL_PANEL": {
            MaterialFormEnum.SHEET: [MaterialTypeEnum.STEEL]
        },
        "OTHER": {
            MaterialFormEnum.STRIP: [MaterialTypeEnum.STAINLESS_STEEL, MaterialTypeEnum.ZINC],
            MaterialFormEnum.COIL: [MaterialTypeEnum.ZINC, MaterialTypeEnum.POLYMER],
            MaterialFormEnum.SHEET: [MaterialTypeEnum.ALUMINIUM, MaterialTypeEnum.STEEL, MaterialTypeEnum.STAINLESS_STEEL, MaterialTypeEnum.ZINC, MaterialTypeEnum.POLYMER]
        }
    }

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ñ–æ—Ä–º—ã
    available_materials = product_material_map.get(product_id, {}).get(form_enum, []) # type: ignore

    return [{"name": mat.name, "value": mat.value} for mat in available_materials]

@router.get("/material/thickness/{type}")
def get_material_thickness(type: str = Path(...)):
    try:
        type_enum = MaterialTypeEnum[type]  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ Enum
    except KeyError:
        raise HTTPException(status_code=422, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞")

    thickness_map = {
        MaterialTypeEnum.ALUMINIUM: [MaterialThicknessEnum.ONE, MaterialThicknessEnum.TWO],
        MaterialTypeEnum.STEEL: [MaterialThicknessEnum.ONE, MaterialThicknessEnum.ONE_FIVE, MaterialThicknessEnum.TWO],
        MaterialTypeEnum.STAINLESS_STEEL: [MaterialThicknessEnum.ONE, MaterialThicknessEnum.ONE_TWO, MaterialThicknessEnum.TWO],
        MaterialTypeEnum.ZINC: [MaterialThicknessEnum.ZERO_FIVE, MaterialThicknessEnum.ZERO_SEVEN, MaterialThicknessEnum.ONE, MaterialThicknessEnum.ONE_TWO, MaterialThicknessEnum.ONE_FIVE, MaterialThicknessEnum.TWO, MaterialThicknessEnum.THREE],
        MaterialTypeEnum.POLYMER: [MaterialThicknessEnum.ZERO_FIVE, MaterialThicknessEnum.ZERO_SEVEN, MaterialThicknessEnum.ONE, MaterialThicknessEnum.ONE_TWO],
    }

    thicknesses = thickness_map.get(type_enum, [])
    return [{"name": thick.name, "value": thick.value} for thick in thicknesses]


@router.get("/workshops", response_model=List[WorkshopRead])
async def get_workshops(db: Session = Depends(get_db)) -> List[WorkshopRead]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ—Ö–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."""
    
    workshops = db.query(Workshop).all()
    workshop_order = {
        WorkshopEnum.PROFILE.value: 3,
        WorkshopEnum.KLAMER.value: 4,
        WorkshopEnum.BRACKET.value: 5,
        WorkshopEnum.EXTENSION_BRACKET.value: 6,
        WorkshopEnum.ENGINEER.value: 0,
        WorkshopEnum.CUTTING.value: 1,
        WorkshopEnum.COORDINATE_PUNCHING.value: 2,
        WorkshopEnum.BENDING.value: 7,
        WorkshopEnum.PAINTING.value: 8,
    }
    
    sorted_workshops = sorted(workshops, key=lambda workshop: workshop_order.get(workshop.name.value, float('inf')))
    workshops = [WorkshopRead.model_validate(workshop) for workshop in sorted_workshops]
    print(workshops)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º SQLAlchemy-–æ–±—ä–µ–∫—Ç—ã –≤ Pydantic-–º–æ–¥–µ–ª–∏
    return workshops


@router.get("/employee")
async def get_employee(db: Session = Depends(get_db)):
    employee = db.query(User).all()
    return employee

@router.get("/urgency")
async def get_urgency():
    urgency = [urgency for urgency in UrgencyEnum]
    return urgency

    
# ------------------- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ -------------------
@router.post("/files/upload/")
def upload_file(file: UploadFile = File(...)):
    file_location = f"uploads/{file.filename}"
    os.makedirs(os.path.dirname(file_location), exist_ok=True)
    with open(file_location, "wb") as f:
        f.write(file.file.read())
    return {"message": "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", "file_path": file_location}
